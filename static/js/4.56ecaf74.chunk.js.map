{"version":3,"sources":["Messages.js"],"names":["Modal","setAppElement","Messages","messages","userId","names","useState","openThread","setOpenThread","length","map","thread","profileId","ids","parseInt","split","filter","id","pop","otherMemberId","user_ids_concatenated","threadId","created_at","className","onClick","body","updated_at","formatDate","isOpen","onRequestClose","contentLabel","message","author_id","dangerouslySetInnerHTML","__html","marked"],"mappings":"gOASAA,IAAMC,cAAc,SAqHLC,UAtGf,YAAgD,IAA5BC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,OAAQC,EAAS,EAATA,MAAS,EACTC,oBAAS,GADA,mBACtCC,EADsC,KAC1BC,EAD0B,KAG7C,OACE,eAAC,IAAD,WACE,cAAC,IAAD,uBACA,cAAC,IAAD,UACGL,EAASM,OACR,qCACGN,EAASO,KAAI,SAAAC,GAAW,IAAD,EAEhBC,EAxBpB,SAAuBC,EAAKT,GAC1B,GAAKS,GAAQT,EAIb,OAAOU,SACLD,EACGE,MAAM,KACNC,QAAO,SAAAC,GAAE,OAAIH,SAASG,EAAI,MAAQb,KAClCc,OAeyBC,CAAa,OAC7BR,QAD6B,IAC7BA,OAD6B,EAC7BA,EAAQS,sBACRhB,GAIIiB,EAAQ,iBAAMV,QAAN,IAAMA,OAAN,EAAMA,EAAQS,sBAAd,mBAAuCT,QAAvC,IAAuCA,OAAvC,EAAuCA,EAAQW,YAE7D,OACE,yBACEC,UAAU,UAEVC,QAAS,kBACPb,EAAOR,SAASM,OAAS,GAAKD,EAAcG,IAJhD,UAOE,cAAC,IAAD,CACEY,UAAU,yBACVlB,MAAOA,EACPY,GAAIL,IAEN,qBAAKW,UAAU,kBAAf,UACG,UAAAZ,EAAOR,SAASQ,EAAOR,SAASM,OAAS,UAAzC,eAA6CgB,OAC5C,mBAEJ,iCACS,OAANd,QAAM,IAANA,OAAA,EAAAA,EAAQe,aACP,sBAAMH,UAAU,eAAhB,SACGI,YAAWhB,EAAOe,cAGvB,uBACA,uBAAMH,UAAU,gBAAhB,UAC8B,IAA3BZ,EAAOR,SAASM,QAAgB,eACL,IAA3BE,EAAOR,SAASM,QAAgB,cAChCE,EAAOR,SAASM,OAAS,GAAzB,UACIE,EAAOR,SAASM,OADpB,qBAxBAY,MA+BX,cAAC,IAAD,CACEO,SAAUrB,EACVsB,eAAgB,kBAAMrB,GAAc,IACpCsB,aAAa,iBAHf,SAKE,sBAAKP,UAAU,iBAAf,UACE,wBACEA,UAAU,uBACVC,QAAS,kBAAMhB,GAAc,IAF/B,kBAMCD,GACCA,EAAWJ,SAASO,KAAI,SAAAqB,GAAO,OAC7B,sBAAKR,UAAU,yBAAf,UACE,sBAAKA,UAAU,eAAf,UACE,cAAC,IAAD,CACEA,UAAU,yBACVN,GAAE,OAAEc,QAAF,IAAEA,OAAF,EAAEA,EAASC,UACb3B,MAAOA,EACPD,OAAQA,KAEC,OAAVG,QAAU,IAAVA,OAAA,EAAAA,EAAYmB,aACX,sBAAMH,UAAU,eAAhB,SACGI,YAAWI,EAAQL,kBAIlB,OAAPK,QAAO,IAAPA,OAAA,EAAAA,EAASN,OACR,qBACEQ,wBAAyB,CACvBC,OAAQC,IAAM,OAACJ,QAAD,IAACA,OAAD,EAACA,EAASN,WAI7B,OAACM,QAAD,IAACA,OAAD,EAACA,EAASN,OAAQ,iDArBwBM,EAAQd,eA4B/D","file":"static/js/4.56ecaf74.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport marked from 'marked';\nimport Modal from 'react-modal';\n\nimport './Messages.scss';\nimport { formatDate } from './utils';\nimport { Section, Heading, Content, CsProfileName } from './components';\n\n// http://reactcommunity.org/react-modal/accessibility/\nModal.setAppElement('#root');\n\nfunction otherMemberId(ids, userId) {\n  if (!ids || !userId) {\n    return;\n  }\n\n  return parseInt(\n    ids\n      .split(',')\n      .filter(id => parseInt(id, 10) !== userId)\n      .pop(),\n  );\n}\n\nfunction Messages({ messages, userId, names }) {\n  const [openThread, setOpenThread] = useState(false);\n\n  return (\n    <Section>\n      <Heading>Messages</Heading>\n      <Content>\n        {messages.length ? (\n          <>\n            {messages.map(thread => {\n              // Other profile IDs than your own\n              const profileId = otherMemberId(\n                thread?.user_ids_concatenated,\n                userId,\n              );\n\n              // Unique ID for message thread\n              const threadId = `${thread?.user_ids_concatenated}-${thread?.created_at}`;\n\n              return (\n                <button\n                  className=\"Message\"\n                  key={threadId}\n                  onClick={() =>\n                    thread.messages.length > 0 && setOpenThread(thread)\n                  }\n                >\n                  <CsProfileName\n                    className=\"Profile-reference-type\"\n                    names={names}\n                    id={profileId}\n                  />\n                  <div className=\"Message-preview\">\n                    {thread.messages[thread.messages.length - 1]?.body ||\n                      'Empty message.'}\n                  </div>\n                  <div>\n                    {thread?.updated_at && (\n                      <span className=\"Message-date\">\n                        {formatDate(thread.updated_at)}\n                      </span>\n                    )}\n                    <br />\n                    <span className=\"Message-count\">\n                      {thread.messages.length === 0 && 'No messages.'}\n                      {thread.messages.length === 1 && 'One message'}\n                      {thread.messages.length > 1 &&\n                        `${thread.messages.length} messages`}\n                    </span>\n                  </div>\n                </button>\n              );\n            })}\n            <Modal\n              isOpen={!!openThread}\n              onRequestClose={() => setOpenThread(false)}\n              contentLabel=\"Message thread\"\n            >\n              <div className=\"Message-thread\">\n                <button\n                  className=\"Message-thread-close\"\n                  onClick={() => setOpenThread(false)}\n                >\n                  Ã—\n                </button>\n                {openThread &&\n                  openThread.messages.map(message => (\n                    <div className=\"Message-thread-message\" key={message.id}>\n                      <div className=\"Message-meta\">\n                        <CsProfileName\n                          className=\"Profile-reference-type\"\n                          id={message?.author_id}\n                          names={names}\n                          userId={userId}\n                        />\n                        {openThread?.updated_at && (\n                          <span className=\"Message-date\">\n                            {formatDate(message.updated_at)}\n                          </span>\n                        )}\n                      </div>\n                      {message?.body && (\n                        <div\n                          dangerouslySetInnerHTML={{\n                            __html: marked(message?.body),\n                          }}\n                        />\n                      )}\n                      {!message?.body && <p>Empty message.</p>}\n                    </div>\n                  ))}\n              </div>\n            </Modal>\n          </>\n        ) : (\n          <p>No messages. :-(</p>\n        )}\n      </Content>\n    </Section>\n  );\n}\n\nexport default Messages;\n"],"sourceRoot":""}