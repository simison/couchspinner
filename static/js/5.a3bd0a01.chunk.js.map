{"version":3,"sources":["References.js"],"names":["countReferences","references","experience","length","filter","reference","referenceTypeLabel","type","isFromMe","experienceLabel","sortReferences","referernces","sort","a","b","dateA","created_at","dateB","ReferencesList","list","userId","names","map","body","creator_id","recipient_id","reference_type","response_body","response_created_at","profileId","className","id","alt","append","formatDate","dangerouslySetInnerHTML","__html","marked","References","writtenReferences","written_references","receivedReferences","received_references","routes","route","label","exact","path"],"mappings":"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","file":"static/js/5.a3bd0a01.chunk.js","sourcesContent":["import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport marked from 'marked';\n\nimport './References.scss';\nimport { formatDate } from './utils';\nimport { Section, Heading, Content, CsProfileName, Tabs } from './components';\n\n/**\n * Count how many certain type references there are in array\n *\n * @param  {Array} references Array of references\n * @param  {String} experience \"positive\", \"neutral\" or \"negative\"\n * @return {Int} Total count\n */\nfunction countReferences(references, experience) {\n  if (!references || references.length === 0) {\n    return 0;\n  }\n\n  return references.filter(reference => reference.experience === experience)\n    .length;\n}\n\nfunction referenceTypeLabel(type, isFromMe) {\n  switch (type) {\n    case 'surf':\n      return isFromMe ? 'To surfer' : 'From surfer';\n    case 'host':\n      return isFromMe ? 'To host' : 'From host';\n    default:\n      return isFromMe ? 'To member' : 'From member';\n  }\n}\n\nfunction experienceLabel(experience) {\n  switch (experience) {\n    case 'positive':\n      return 'Positive';\n    case 'negative':\n      return 'Negative';\n    case 'neutral':\n      return 'Neutral';\n    case 'did_not_meet':\n      return 'Did not meet';\n    default:\n      return experience;\n  }\n}\n\nfunction sortReferences(referernces) {\n  return referernces.sort(function (a, b) {\n    var dateA = a.created_at;\n    var dateB = b.created_at;\n    if (dateA < dateB) {\n      return -1;\n    }\n    if (dateA > dateB) {\n      return 1;\n    }\n\n    // must be equal\n    return 0;\n  });\n}\n\nfunction ReferencesList({ list, userId, names }) {\n  return list.map(reference => {\n    const {\n      body,\n      created_at,\n      creator_id,\n      experience,\n      recipient_id,\n      reference_type,\n      response_body,\n      response_created_at,\n    } = reference;\n    const isFromMe = creator_id === userId;\n    const profileId = isFromMe ? recipient_id : creator_id;\n\n    return (\n      <div\n        className=\"Profile-reference\"\n        key={`${creator_id}-${recipient_id}-${created_at}`}\n      >\n        <p className=\"Profile-reference-meta\">\n          {isFromMe ? (\n            referenceTypeLabel(reference_type, isFromMe)\n          ) : (\n            <>\n              <CsProfileName\n                className=\"Profile-reference-type\"\n                names={names}\n                id={profileId}\n                alt={referenceTypeLabel(reference_type)}\n                append={\n                  <>\n                    {reference_type === 'host' && '(host)'}\n                    {reference_type === 'surf' && '(surfer)'}\n                  </>\n                }\n              />\n            </>\n          )}\n          {experience && (\n            <strong\n              className={`Profile-reference-experience Profile-reference-experience-${experience}`}\n            >\n              {experience === 'positive' && 'â˜… '}\n              {experienceLabel(experience)}\n            </strong>\n          )}\n          {created_at && (\n            <span className=\"Profile-reference-date\">\n              {formatDate(created_at)}\n            </span>\n          )}\n        </p>\n        {body && (\n          <p>\n            <span dangerouslySetInnerHTML={{ __html: marked(body) }} />\n          </p>\n        )}\n        {response_body && (\n          <div className=\"Profile-reference-response\">\n            <p>\n              <strong>Response</strong>\n              {response_created_at && (\n                <span className=\"Profile-reference-date\">\n                  {` ${formatDate(response_created_at)}`}\n                </span>\n              )}\n            </p>\n            <p>\n              <span\n                dangerouslySetInnerHTML={{ __html: marked(response_body) }}\n              />\n            </p>\n          </div>\n        )}\n      </div>\n    );\n  });\n}\n\nfunction References({ references, userId, names }) {\n  const writtenReferences = sortReferences(\n    references?.written_references ?? [],\n  );\n  const receivedReferences = sortReferences(\n    references?.received_references ?? [],\n  );\n\n  return (\n    <Router>\n      <Section>\n        <Heading>References</Heading>\n        <Content>\n          <p>\n            {writtenReferences.length ? (\n              <>\n                <strong>{`${writtenReferences.length} written: `}</strong>\n                {`${countReferences(writtenReferences, 'positive')} positive, `}\n                {`${countReferences(\n                  writtenReferences,\n                  'neutral',\n                )} neutral, and `}\n                {`${countReferences(writtenReferences, 'negative')} negative.`}\n              </>\n            ) : (\n              `You didn't write references`\n            )}\n          </p>\n          <p>\n            {receivedReferences.length ? (\n              <>\n                <strong>{`${receivedReferences.length} received: `}</strong>\n                {`${countReferences(\n                  receivedReferences,\n                  'positive',\n                )} positive, `}\n                {`${countReferences(\n                  receivedReferences,\n                  'neutral',\n                )} neutral, and `}\n                {`${countReferences(receivedReferences, 'negative')} negative.`}\n              </>\n            ) : (\n              `You didn't receive references`\n            )}\n          </p>\n\n          <Tabs\n            routes={[\n              { route: '/references', label: 'Received references' },\n              { route: '/references/written', label: 'Written references' },\n            ]}\n          />\n\n          <Switch>\n            <Route exact path=\"/references\">\n              <h3>Received references</h3>\n              <ReferencesList\n                list={receivedReferences}\n                names={names}\n                userId={userId}\n              />\n            </Route>\n            <Route path=\"/references/written\">\n              <h3>Written references</h3>\n              <ReferencesList\n                list={writtenReferences}\n                names={names}\n                userId={userId}\n              />\n            </Route>\n          </Switch>\n        </Content>\n      </Section>\n    </Router>\n  );\n}\n\nexport default References;\n"],"sourceRoot":""}